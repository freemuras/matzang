plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.5'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'matnam_zang'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
    testImplementation 'org.mockito:mockito-core:4.0.0' // Mockito - mocking 기능
    testImplementation 'org.springframework.boot:spring-boot-starter-web' // Spring Boot Test에서 제공하는 MockMvc (HTTP API 테스트)
    testImplementation 'org.springframework.boot:spring-boot-starter-data-jpa' // JPA 테스트를 위한 DataJpaTest 의존성
    testImplementation 'org.springframework.security:spring-security-test' // Spring Security Test (Security가 있을 경우 필요한 경우 추가)
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
}

// junit5 를 사용해서 src/test/java 아래의 테스트 클래스 자동인식하도록 함
tasks.named('test') {
	useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-parameters'
}
