name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: MY_AWS_REGION                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: 'matzang'           # set this to your Amazon ECR repository name
  ECS_SERVICE: MY_ECS_SERVICE                 # set this to your Amazon ECS service name
  ECS_CLUSTER: MY_ECS_CLUSTER                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: MY_CONTAINER_NAME           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition

permissions:
  contents: read

jobs:
  # React Frontend 빌드 및 배포
  frontend:
    runs-on: ubuntu-latest  # GitHub Actions에서 제공하는 Ubuntu 환경에서 실행
    
    steps:
      - name: Check out code
        uses: actions/checkout@v3  # GitHub 리포지토리 코드 체크아웃

      - name: Install dependencies
        run: npm install  # npm 패키지 설치

      - name: Build frontend
        run: npm run build  # 빌드 실행 (package.json에 build 스크립트 정의되어 있어야 함)

      - name: Deploy frontend to AWS S3 (혹은 다른 배포 방법)
        run: |
          # AWS CLI 설정
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region us-west-2  # 지역 설정 (필요시 수정)

          # React 애플리케이션을 S3에 배포 예시
          aws s3 sync ./build/ s3://your-s3-bucket-name --delete

  # Spring Boot Backend 빌드, 테스트 및 배포
  backend:
    runs-on: ubuntu-latest  # GitHub Actions에서 제공하는 Ubuntu 환경에서 실행
    needs: frontend  # frontend 작업이 완료되어야 backend 작업이 실행됨

    steps:
      - name: Check out code
        uses: actions/checkout@v3  # GitHub 리포지토리 코드 체크아웃

      - name: Set up JDK 21 (Spring Boot 21은 JDK 17 이상 필요)
        uses: actions/setup-java@v3
        with:
          java-version: '21'  # 원하는 JDK 버전 설정
          distribution: 'adoptopenjdk'  # OpenJDK 사용 (원하는 버전 선택 가능)

      - name: Install dependencies 
        run: ./gradlew build  # Gradle 빌드 (프로젝트에 맞는 명령어로 변경)

      - name: Run tests
        run: ./gradlew test  # 테스트 실행 (Gradle 기준)

      - name: Build Spring Boot app
        run: ./gradlew build  # Spring Boot 애플리케이션 빌드 (Gradle 기준)
      
      - name: Deploy backend to AWS EC2 
        run: |
          # AWS CLI 설정
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region us-west-2  # 지역 설정 (필요시 수정)

          # EC2 인스턴스에 Spring Boot JAR 파일 배포 예시
          scp -i /path/to/your/key.pem build/libs/your-app.jar ec2-user@your-ec2-public-ip:/home/ec2-user/app/
          ssh -i /path/to/your/key.pem ec2-user@your-ec2-public-ip 'java -jar /home/ec2-user/app/your-app.jar &'
